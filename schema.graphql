# aka LAND
type Parcel @entity {
  id: ID!
  x: BigInt
  y: BigInt
  estate: Estate
  owner: Bytes
  data: ParcelData
  lastTransferredAt: BigInt
  orderOwner: Bytes
  orderPrice: BigInt
  activeOrder: Order
  orders: [Order!] @derivedFrom(field: "parcel")
  createdAt: BigInt
  updatedAt: BigInt
  operators: [Bytes!]
}

type ParcelData @entity {
  id: ID!
  parcel: Parcel!
  version: String
  name: String
  description: String
  ipns: String
}

type Order @entity {
  id: ID!
  type: OrderType
  parcel: Parcel
  # Defined in the REST API, source unclear:
  # estate: Estate # TODO - realted to broken Estat below
  txHash: Bytes!
  owner: Bytes!
  price: BigInt!
  status: OrderStatus
  buyer: Bytes
  contract: Bytes!
  blockNumber: BigInt!
  expiresAt: BigInt!
  blockTimeCreatedAt: BigInt!
  blockTimeUpdatedAt: BigInt
  marketplace: Bytes!

  # New addition on top of Legacy 'Auction'
  nftAddress: Bytes
}

enum OrderType @entity {
  parcel
  estate
}

enum OrderStatus @entity {
  open
  sold
  cancelled
}

type Estate @entity {
  id: ID!           # estate ID (based on total supply of estates)
  owner: Bytes!
  operator: Bytes
  metaData: String  # TODO - broken, could be reading CSV that is needed (see other example)
  land: [BigInt!]   # AddLand and TransferLand events
  size: BigInt!
  tx: Bytes
  sizeArray: Int!
}

 type Mortgage @entity {
   id: ID!                          # mortage ID
   txHash: Bytes!
   createdAt: BigInt!
   startedAt: BigInt
   lastUpdatedAt: BigInt!
   status: MortgageStatus!

   borrower: Bytes!
   rcnEngine: Bytes!
   loan_id: BigInt!
   landMarket: Bytes!
   landID: BigInt!
   deposit: BigInt!                 # User deposit in MANA (collateral)
   tokenConverter: Bytes!

   # Get from Storage
   landCost: BigInt!

   # Get Estate from Parcel.load()
   parcel: Parcel
   estate: Estate

   # Get from loan
   # Note - Other data could be grabbed from the loan, but none of it seems necessary
   lender: Bytes!
   loanAmount: BigInt!
   dueTime: Int!
 }

 enum MortgageStatus @entity {
   pending
   cancelled
   ongoing
   paid
   defaulted
 }

type Invite @entity {
  id: ID!                 # eth user addr
  inviteBalance: BigInt!  # amount of invites user can hand out
  invites: [BigInt!]!     # can own multiple invites, which are each ERC721 tokens
}